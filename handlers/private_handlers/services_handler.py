import logging
from aiogram import types, Router, F
from aiogram.enums import ParseMode
from aiogram.types import CallbackQuery, Message
from aiogram.exceptions import TelegramBadRequest
from keyboards import services_kb

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

router = Router()


@router.message(F.text == "üîß –£—Å–ª—É–≥–∏")
async def services_callback(message: Message):
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = f"ID: {message.from_user.id}, "
        if message.from_user.username:
            user_info += f"Username: @{message.from_user.username}, "
        user_info += f"Name: {message.from_user.first_name}"
        if message.from_user.last_name:
            user_info += f" {message.from_user.last_name}"

        logger.info(f"Services callback received from user: {user_info}")

        await message.delete()

        await message.answer(
            "*–£—Å–ª—É–≥–∏:*\n"
            "*–†–µ–º–æ–Ω—Ç –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ç–ª–æ–≤, –≥–∞–∑–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:*\n"
            "–ú–µ–Ω—è–µ–º, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —Ä–µ–º–æ–Ω—Ç–∏—Ä—É–µ–º –≥–∞–∑–æ–≤—ã–µ –∫–æ—Ç–ª—ã, –∫–æ–ª–æ–Ω–∫–∏, –±–æ–π–ª–µ—Ä—ã –∏ –¥—Ä—É–≥–æ–µ –≥–∞–∑–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ. "
            "_–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∏ –Ω–∞–¥—ë–∂–Ω—É—é —Ä–∞–±–æ—Ç—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è._\n\n"
            "*–°–∏—Å—Ç–µ–º—ã –æ—Ç–æ–ø–ª–µ–Ω–∏—è:*\n"
            "–ü—Ä–æ–µ–∫—Ç–∏—Ä—É–µ–º –∏ –º–æ–Ω—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—ã –æ—Ç–æ–ø–ª–µ–Ω–∏—è —Å –Ω—É–ª—è. "
            "_–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ, –¥–æ–ª–≥–æ–≤–µ—á–Ω–æ, —Å —É—á—ë—Ç–æ–º –≤—Å–µ—Ö –Ω–æ—Ä–º._\n\n"
            "*–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞:*\n"
            "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —Ä–µ–º–æ–Ω—Ç–∏—Ä—É–µ–º –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ, —Ç—Ä—É–±—ã –∏ —Å–∞–Ω—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ. "
            "_–†–∞–±–æ—Ç–∞ –±–µ–∑ –ø—Ä–æ—Ç–µ—á–µ–∫ –∏ —Å –¥–æ–ª–≥–∏–º —Å—Ä–æ–∫–æ–º —Å–ª—É–∂–±—ã._\n\n"
            "*–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∏–ª–∏ —Ç–æ—á–Ω—É—é –æ—Ü–µ–Ω–∫—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–•–æ—á—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é¬ª.*",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=services_kb
        )

        logger.info(f"Services message successfully updated for user {message.from_user.id}")

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        logger.error(
            f"Unexpected error in services callback for user {message.from_user.id}: {e}",
            exc_info=True
        )

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
        error_context = {
            'user_id': message.from_user.id,
            'chat_id': message.message.chat.id if message.message else 'unknown',
            'error_type': type(e).__name__,
            'error_message': str(e)
        }
        logger.debug(f"Error context: {error_context}")

        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞", show_alert=False)