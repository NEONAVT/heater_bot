import json
import logging
from datetime import datetime, timezone

from aiogram import types, Router, F
from aiogram.enums import ParseMode
from bot_config import telegram_client
from keyboards import remind_kb
from services import users_service, reminders_service
from settings import settings

logger = logging.getLogger(__name__)


class WebAppHandler:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ WebApp —Ñ–æ—Ä–º –∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """

    active_requests: dict[int, dict] = {}

    def __init__(self, router: Router) -> None:
        self.router: Router = router
        self.register_handlers()

    def register_handlers(self) -> None:
        self.router.message.register(self.web_app_data_handler, F.web_app_data)
        self.router.message.register(
            self.handle_files,
            F.photo | F.video | F.document | F.voice | F.video_note
        )

    async def web_app_data_handler(self, message: types.Message) -> None:
        try:
            logger.info(
                f"Web app data received from user "
                f"{message.from_user.id}")
            logger.debug(f"Raw web app data: {message.web_app_data.data}")

            data = json.loads(message.web_app_data.data)
            form_type = data.get("form", "unknown")
            logger.info(f"Form type: {form_type}")
            logger.debug(f"Parsed data: {data}")

            if form_type == "callback":
                await self._handle_callback_form(message, data)
            elif form_type == "problem":
                await self._handle_problem_form(message, data)
            else:
                logger.warning(
                    f"Unknown form type from user "
                    f"{message.from_user.id}: {form_type}"
                )
                await message.answer(
                    "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–æ—Ä–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )

        except json.JSONDecodeError as e:
            logger.error(
                f"JSON decode error from user "
                f"{message.from_user.id}: {e}"
            )
            await message.answer(
                "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
        except Exception as e:
            logger.error(
                f"Unexpected error in web_app_data_handler for user "
                f"{message.from_user.id}: {e}",
                exc_info=True
            )
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def _handle_callback_form(
            self, message: types.Message, data: dict
    ) -> None:
        admin_id = settings.ADMIN_CHAT_ID
        name = data.get("name", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        phone = data.get("phone", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        topic = data.get("topic", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        time_val = data.get("time", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")

        text_msg = (
            f"üîî –ó–∞–∫–∞–∑–∞–Ω –û–ë–†–ê–¢–ù–´–ô –ó–í–û–ù–û–ö –æ—Ç {name.capitalize()}\n"
            f"–Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone}\n"
            f"—É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞: {time_val}\n"
            f'—Ç–µ–º–∞ –∑–≤–æ–Ω–∫–∞: "{topic.capitalize()}"\n\n'
            f"–î–ª—è —Å–≤—è–∑–∏ –≤ —á–∞—Ç–µ "
            f"@{message.from_user.username or '–Ω–µ—Ç username'}\n\n"
            f"‚ùì –ù–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–∑–∂–µ?"
        )

        response = await telegram_client.post(
            method="sendMessage",
            chat_id=admin_id,
            text=text_msg,
            reply_markup=remind_kb
        )
        msg_id = response['result']['message_id']

        await reminders_service.save_reminder(
            chat_id=admin_id,
            message_id=msg_id,
            type_="callback",
            username=message.from_user.username
        )

        await message.answer(
            f"{message.from_user.first_name}, —Å–ø–∞—Å–∏–±–æ!\n"
            "üì® –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –ø–µ—Ä–µ–¥–∞–Ω–∞!\n"
            "–° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è."
        )
        await users_service.set_phone_number(
            user_id=message.from_user.id, phone_number=phone
        )
        await users_service.update_last_data(
            user_id=message.from_user.id,
            updated_date=datetime.now(timezone.utc)
        )
        await users_service.set_client_status(
            user_id=message.from_user.id
        )
        logger.info(
            f"Callback confirmation sent to user "
            f"{message.from_user.id}"
        )

    async def _handle_problem_form(
            self, message: types.Message, data: dict
    ) -> None:
        name = data.get("name", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        phone = data.get("phone", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        problem = data.get("topic", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")

        self.active_requests[message.chat.id] = {
            "name": name,
            "phone": phone,
            "problem": problem,
            "files": []
        }

        logger.info(
            f"Problem request started for user {message.from_user.id}: "
            f"name={name}, phone={phone}"
        )
        logger.debug(f"Problem description: {problem}")

        await message.answer(
            f"–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:\n–ò–º—è: {name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {problem}\n\n"
            "*üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ –æ–¥–Ω–æ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã.*\n"
            "*–ò–ª–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å üéôÔ∏è–≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ üìπ–≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ.*",
            parse_mode=ParseMode.MARKDOWN,
        )

        await users_service.update_last_data(
            user_id=message.from_user.id,
            updated_date=datetime.now(timezone.utc)
        )
        await users_service.set_client_status(user_id=message.from_user.id)
        logger.info(
            f"Problem request instructions sent to user "
            f"{message.from_user.id}")

    async def handle_files(self, message: types.Message) -> None:
        if message.chat.id not in self.active_requests:
            logger.warning(
                f"File received from user "
                f"{message.from_user.id} without active request"
            )
            await message.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É."
            )
            return

        req = self.active_requests[message.chat.id]
        file_type, file_id = None, None

        if message.photo:
            file_type, file_id = "photo", message.photo[-1].file_id
        elif message.video:
            file_type, file_id = "video", message.video.file_id
        elif message.document:
            file_type, file_id = "document", message.document.file_id
        elif message.voice:
            file_type, file_id = "voice", message.voice.file_id
        elif message.video_note:
            file_type, file_id = "video_note", message.video_note.file_id

        if file_type and file_id:
            req["files"].append((file_type, file_id))
            logger.info(
                f"File added to request for user {message.from_user.id}: "
                f"type={file_type}, id={file_id}"
            )
            logger.debug(f"Total files in request: {len(req['files'])}")

        await self.finalize_request(message.chat.id, message)

    async def finalize_request(
            self, chat_id: int, message: types.Message
    ) -> None:
        req = self.active_requests.pop(chat_id, None)
        if not req:
            logger.warning(
                f"Finalize request called for user "
                f"{message.from_user.id} but no active request"
            )
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏.")
            return

        admin_id = settings.ADMIN_CHAT_ID
        text_msg = (
            f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç {req['name'].capitalize()}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {req['phone']}\n"
            f"–ü—Ä–æ–±–ª–µ–º–∞: {req['problem']}\n\n"
            f"–î–ª—è —Å–≤—è–∑–∏: @{message.from_user.username or '–Ω–µ—Ç username'}\n\n"
            f"‚ùì –ù–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–∑–∂–µ?"
        )

        logger.info(
            f"Sending problem request to admins: "
            f"{admin_id}, files count: {len(req['files'])}"
        )

        response = await telegram_client.post(
            method="sendMessage",
            chat_id=admin_id,
            text=text_msg,
            reply_markup=remind_kb
        )
        msg_id = response['result']['message_id']
        await reminders_service.save_reminder(
            chat_id=admin_id,
            message_id=msg_id,
            type_="problem",
            username=message.from_user.username
        )
        logger.info(f"Problem request text sent to admin {admin_id}")

        for ftype, fid in req["files"]:
            method_map = {
                "photo": "sendPhoto",
                "video": "sendVideo",
                "document": "sendDocument",
                "voice": "sendVoice",
                "video_note": "sendVideoNote"
            }
            try:
                await telegram_client.post(
                    method=method_map[ftype],
                    chat_id=admin_id,
                    **{ftype: fid})
                logger.info(f"File sent to admin {admin_id}: type={ftype}")
            except Exception as file_e:
                logger.error(
                    f"Failed to send file to admin"
                    f" {admin_id}: {file_e}")

        await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        logger.info(f"Request finalized for user {message.from_user.id}")


router = Router()
WebAppHandler(router)
