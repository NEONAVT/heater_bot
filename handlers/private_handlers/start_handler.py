import logging
from aiogram import Router, types
from aiogram.filters import CommandStart
from services import users_service
from keyboards import start_kb

logger = logging.getLogger(__name__)


class StartHandler:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∞ —Ç–∞–∫–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """

    def __init__(self, router: Router) -> None:
        self.router: Router = router
        self.register_handlers()

    def register_handlers(self) -> None:
        self.router.message.register(self.start, CommandStart())

    @staticmethod
    async def start(message: types.Message) -> None:
        try:
            user_info = f"ID: {message.from_user.id}, "
            if message.from_user.username:
                user_info += f"Username: @{message.from_user.username}, "
            user_info += f"Name: {message.from_user.first_name}"
            if message.from_user.last_name:
                user_info += f" {message.from_user.last_name}"

            logger.info(f"Start command received from user: {user_info}")
            logger.info(
                f"Chat ID: {message.chat.id}, "
                f"Chat type: {message.chat.type}")

            user = await users_service.register_user(
                user_id=message.from_user.id,
                chat_id=message.chat.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name
            )

            text = (
                f"üëã–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {user.first_name or user.username}!\n\n"
                f"–ú—ã –ø–æ–º–æ–≥–∞–µ–º —Å –∑–∞–º–µ–Ω–æ–π –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π "
                f"–≥–∞–∑–æ–≤—ã—Ö –∫–æ—Ç–ª–æ–≤, –∫–æ–ª–æ–Ω–æ–∫, –±–æ–π–ª–µ—Ä–æ–≤, "
                f"–∞ —Ç–∞–∫–∂–µ —Å –º–æ–Ω—Ç–∞–∂–æ–º —Å–∏—Å—Ç–µ–º –æ—Ç–æ–ø–ª–µ–Ω–∏—è "
                f"–∏ –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è —Å –Ω—É–ª—è.\n\n"
                f"üìû–ó–≤–æ–Ω–∫–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å 8:00 –¥–æ 10:00.\n"
                f"–í –æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–æ–≤, "
                f"—á—Ç–æ–±—ã –≤—Å—ë –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –≤ —Å—Ä–æ–∫.\n\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ —É–∑–Ω–∞—Ç—å –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö "
                f"–∏–ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ ‚Äî "
                f"—Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
                f"‚¨áÔ∏è–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ."
            )

            await message.answer(text=text, reply_markup=start_kb)
            logger.info(
                f"Start message successfully sent to user "
                f"{message.from_user.id}")

        except Exception as e:
            logger.error(
                f"Error sending start message to user "
                f"{message.from_user.id}: {e}",
                exc_info=True
            )
            logger.debug({
                "user_id": message.from_user.id,
                "chat_id": message.chat.id,
                "error_type": type(e).__name__,
                "error_message": str(e),
            })

            try:
                await message.answer(
                    "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. "
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            except Exception as inner_e:
                logger.error(
                    f"Failed to send error message to user: {inner_e}")


router = Router()
StartHandler(router)
